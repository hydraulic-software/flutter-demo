include required("/stdlib/flutter/flutter.conf")

# Importing the version from pubspec.yaml requires installing the "yq" tool to convert yaml to json.
pubspec {
  include required("#!yq -o json pubspec.yaml")
}

app {
  # ðŸ’¥ EDIT THESE NEXT LINES!!! ðŸ’¥
  site {
    # Where will packages look for updates? 
    # 
    # We could skip this line and the next to default to GitHub Releases, but downloads
    # and updates are faster if hosted on a regular web server.
    base-url = downloads.example.com/flutter-demo

    # How to upload the generated packages and update metadata.
    # The deploy-to-ssh.yml workflow shows how to set up the copy-to value as a secret,
    # in case it's sensitive.
    copy-to = "sftp://downloads.example.com/var/www/flutter-demo"

    # When uploading to GitHub Releases, you need to set up the OAuth token below.
    # It is placed in the OAUTH_TOKEN environment variable by the deploy-to-gh.yml workflow.
    # This config will only be used if you don't set up the base-url and copy-to settings above.
    github {
      oauth-token = ${env.OAUTH_TOKEN}

      # The pages-branch setting is optional. If used, Conveyor will copy the download.html
      # and icon files into the specified branch, so you could serve it from GitHub Pages.
      pages-branch = "gh-pages"
    }
  }

  rdns-name = com.example.FlutterDemo      # <-- EDIT THIS
  display-name = Flutter Demo
  fsname = flutter-demo
  contact-email = "contact@example.com"

  vcs-url = "https://github.com/YOU/YOUR_PROJECT"   # Delete for commercial projects.
  license = MIT            # Delete for commercial
  vendor = Example Inc     # Optional, delete for open source projects.

  version = ${pubspec.version}

  # Conveyor will auto-generate an icon based on the display name by default.
  # Here we change the gradient to a more fluttery/water-powered themed one.
  # We could also set `icons = our-app.svg`, or `icons = "icons/our-app*.png"`.
  # See docs for details.
  icons.gradient = "aqua;navy"

  # Uncomment this line app check for and apply updates synchronously on every launch. It adds a blocking HTTPS request to every start,
  # similar to a web app. Your app won't launch until it's been updated. Don't use this indiscriminately unless your app has to stay closely
  # synced to a server protocol or is only run very rarely, as it's nicer for the user when updates can apply in the background as they work.
  #
  # updates = aggressive

  # The "artifacts" directory will be created by the deploy-to-{gh,ssh}.yml workflows, containing the output of the
  # build.yml workflow.
  windows.amd64.inputs += artifacts/windows
  linux.amd64.inputs += artifacts/build-linux-amd64.tar
  mac.amd64.inputs += artifacts/build-macos-amd64.tar
  mac.aarch64.inputs += artifacts/build-macos-aarch64.tar
}

conveyor.compatibility-level = 9
